/*
 * This file is generated by jOOQ.
 */
package app.itetenosuke.infra.db.jooq.generated.tables;


import app.itetenosuke.infra.db.jooq.generated.Keys;
import app.itetenosuke.infra.db.jooq.generated.Sukeroku;
import app.itetenosuke.infra.db.jooq.generated.tables.records.NotesMedicineRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 痛み記録_薬マスタ関連テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NOTES_MEDICINE_TABLE extends TableImpl<NotesMedicineRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sukeroku.notes_medicine</code>
     */
    public static final NOTES_MEDICINE_TABLE NOTES_MEDICINE = new NOTES_MEDICINE_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotesMedicineRecord> getRecordType() {
        return NotesMedicineRecord.class;
    }

    /**
     * The column <code>sukeroku.notes_medicine.fk_note_id</code>. 痛み記録ID
     */
    public final TableField<NotesMedicineRecord, Long> FK_NOTE_ID = createField(DSL.name("fk_note_id"), SQLDataType.BIGINT.nullable(false), this, "痛み記録ID");

    /**
     * The column <code>sukeroku.notes_medicine.fk_medicine_id</code>. 薬ID
     */
    public final TableField<NotesMedicineRecord, Long> FK_MEDICINE_ID = createField(DSL.name("fk_medicine_id"), SQLDataType.BIGINT.nullable(false), this, "薬ID");

    /**
     * The column <code>sukeroku.notes_medicine.medicine_seq</code>. 痛み記録_薬登録連番
     */
    public final TableField<NotesMedicineRecord, Integer> MEDICINE_SEQ = createField(DSL.name("medicine_seq"), SQLDataType.INTEGER.nullable(false), this, "痛み記録_薬登録連番");

    private NOTES_MEDICINE_TABLE(Name alias, Table<NotesMedicineRecord> aliased) {
        this(alias, aliased, null);
    }

    private NOTES_MEDICINE_TABLE(Name alias, Table<NotesMedicineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("痛み記録_薬マスタ関連テーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>sukeroku.notes_medicine</code> table reference
     */
    public NOTES_MEDICINE_TABLE(String alias) {
        this(DSL.name(alias), NOTES_MEDICINE);
    }

    /**
     * Create an aliased <code>sukeroku.notes_medicine</code> table reference
     */
    public NOTES_MEDICINE_TABLE(Name alias) {
        this(alias, NOTES_MEDICINE);
    }

    /**
     * Create a <code>sukeroku.notes_medicine</code> table reference
     */
    public NOTES_MEDICINE_TABLE() {
        this(DSL.name("notes_medicine"), null);
    }

    public <O extends Record> NOTES_MEDICINE_TABLE(Table<O> child, ForeignKey<O, NotesMedicineRecord> key) {
        super(child, key, NOTES_MEDICINE);
    }

    @Override
    public Schema getSchema() {
        return Sukeroku.SUKEROKU;
    }

    @Override
    public UniqueKey<NotesMedicineRecord> getPrimaryKey() {
        return Keys.NOTES_MEDICINE_PKEY;
    }

    @Override
    public List<UniqueKey<NotesMedicineRecord>> getKeys() {
        return Arrays.<UniqueKey<NotesMedicineRecord>>asList(Keys.NOTES_MEDICINE_PKEY);
    }

    @Override
    public List<ForeignKey<NotesMedicineRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotesMedicineRecord, ?>>asList(Keys.NOTES_MEDICINE__NOTES_MEDICINE_FK_NOTE_ID_FKEY, Keys.NOTES_MEDICINE__NOTES_MEDICINE_FK_MEDICINE_ID_FKEY);
    }

    public NOTES_TABLE notes() {
        return new NOTES_TABLE(this, Keys.NOTES_MEDICINE__NOTES_MEDICINE_FK_NOTE_ID_FKEY);
    }

    public MEDICINE_TABLE medicine() {
        return new MEDICINE_TABLE(this, Keys.NOTES_MEDICINE__NOTES_MEDICINE_FK_MEDICINE_ID_FKEY);
    }

    @Override
    public NOTES_MEDICINE_TABLE as(String alias) {
        return new NOTES_MEDICINE_TABLE(DSL.name(alias), this);
    }

    @Override
    public NOTES_MEDICINE_TABLE as(Name alias) {
        return new NOTES_MEDICINE_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NOTES_MEDICINE_TABLE rename(String name) {
        return new NOTES_MEDICINE_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NOTES_MEDICINE_TABLE rename(Name name) {
        return new NOTES_MEDICINE_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
