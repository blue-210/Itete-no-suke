/*
 * This file is generated by jOOQ.
 */
package app.itetenosuke.infra.db.jooq.generated.tables;


import app.itetenosuke.infra.db.jooq.generated.Keys;
import app.itetenosuke.infra.db.jooq.generated.Sukeroku;
import app.itetenosuke.infra.db.jooq.generated.tables.records.BodypartsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 部位マスタ
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BODYPARTS_TABLE extends TableImpl<BodypartsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sukeroku.bodyparts</code>
     */
    public static final BODYPARTS_TABLE BODYPARTS = new BODYPARTS_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BodypartsRecord> getRecordType() {
        return BodypartsRecord.class;
    }

    /**
     * The column <code>sukeroku.bodyparts.body_parts_id</code>. 部位ID
     */
    public final TableField<BodypartsRecord, Long> BODY_PARTS_ID = createField(DSL.name("body_parts_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "部位ID");

    /**
     * The column <code>sukeroku.bodyparts.body_parts_name</code>. 部位名
     */
    public final TableField<BodypartsRecord, String> BODY_PARTS_NAME = createField(DSL.name("body_parts_name"), SQLDataType.VARCHAR(20).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "部位名");

    /**
     * The column <code>sukeroku.bodyparts.status</code>. 部位ステータス : 使用中ならALIVE, 削除済みならDELETED
     */
    public final TableField<BodypartsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.field("'ALIVE'::character varying", SQLDataType.VARCHAR)), this, "部位ステータス : 使用中ならALIVE, 削除済みならDELETED");

    /**
     * The column <code>sukeroku.bodyparts.created_at</code>. 登録日
     */
    public final TableField<BodypartsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "登録日");

    /**
     * The column <code>sukeroku.bodyparts.updated_at</code>. 更新日
     */
    public final TableField<BodypartsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "更新日");

    private BODYPARTS_TABLE(Name alias, Table<BodypartsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BODYPARTS_TABLE(Name alias, Table<BodypartsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("部位マスタ"), TableOptions.table());
    }

    /**
     * Create an aliased <code>sukeroku.bodyparts</code> table reference
     */
    public BODYPARTS_TABLE(String alias) {
        this(DSL.name(alias), BODYPARTS);
    }

    /**
     * Create an aliased <code>sukeroku.bodyparts</code> table reference
     */
    public BODYPARTS_TABLE(Name alias) {
        this(alias, BODYPARTS);
    }

    /**
     * Create a <code>sukeroku.bodyparts</code> table reference
     */
    public BODYPARTS_TABLE() {
        this(DSL.name("bodyparts"), null);
    }

    public <O extends Record> BODYPARTS_TABLE(Table<O> child, ForeignKey<O, BodypartsRecord> key) {
        super(child, key, BODYPARTS);
    }

    @Override
    public Schema getSchema() {
        return Sukeroku.SUKEROKU;
    }

    @Override
    public Identity<BodypartsRecord, Long> getIdentity() {
        return (Identity<BodypartsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BodypartsRecord> getPrimaryKey() {
        return Keys.BODYPARTS_PKEY;
    }

    @Override
    public List<UniqueKey<BodypartsRecord>> getKeys() {
        return Arrays.<UniqueKey<BodypartsRecord>>asList(Keys.BODYPARTS_PKEY);
    }

    @Override
    public BODYPARTS_TABLE as(String alias) {
        return new BODYPARTS_TABLE(DSL.name(alias), this);
    }

    @Override
    public BODYPARTS_TABLE as(Name alias) {
        return new BODYPARTS_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BODYPARTS_TABLE rename(String name) {
        return new BODYPARTS_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BODYPARTS_TABLE rename(Name name) {
        return new BODYPARTS_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
