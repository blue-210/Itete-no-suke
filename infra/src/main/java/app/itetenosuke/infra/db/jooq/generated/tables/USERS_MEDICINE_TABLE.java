/*
 * This file is generated by jOOQ.
 */
package app.itetenosuke.infra.db.jooq.generated.tables;


import app.itetenosuke.infra.db.jooq.generated.Keys;
import app.itetenosuke.infra.db.jooq.generated.Sukeroku;
import app.itetenosuke.infra.db.jooq.generated.tables.records.UsersMedicineRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * ユーザー_薬マスタ関連テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class USERS_MEDICINE_TABLE extends TableImpl<UsersMedicineRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sukeroku.users_medicine</code>
     */
    public static final USERS_MEDICINE_TABLE USERS_MEDICINE = new USERS_MEDICINE_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersMedicineRecord> getRecordType() {
        return UsersMedicineRecord.class;
    }

    /**
     * The column <code>sukeroku.users_medicine.fk_user_id</code>. ユーザid
     */
    public final TableField<UsersMedicineRecord, Long> FK_USER_ID = createField(DSL.name("fk_user_id"), SQLDataType.BIGINT.nullable(false), this, "ユーザid");

    /**
     * The column <code>sukeroku.users_medicine.fk_medicine_id</code>. 薬ID
     */
    public final TableField<UsersMedicineRecord, Long> FK_MEDICINE_ID = createField(DSL.name("fk_medicine_id"), SQLDataType.BIGINT.nullable(false), this, "薬ID");

    private USERS_MEDICINE_TABLE(Name alias, Table<UsersMedicineRecord> aliased) {
        this(alias, aliased, null);
    }

    private USERS_MEDICINE_TABLE(Name alias, Table<UsersMedicineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ユーザー_薬マスタ関連テーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>sukeroku.users_medicine</code> table reference
     */
    public USERS_MEDICINE_TABLE(String alias) {
        this(DSL.name(alias), USERS_MEDICINE);
    }

    /**
     * Create an aliased <code>sukeroku.users_medicine</code> table reference
     */
    public USERS_MEDICINE_TABLE(Name alias) {
        this(alias, USERS_MEDICINE);
    }

    /**
     * Create a <code>sukeroku.users_medicine</code> table reference
     */
    public USERS_MEDICINE_TABLE() {
        this(DSL.name("users_medicine"), null);
    }

    public <O extends Record> USERS_MEDICINE_TABLE(Table<O> child, ForeignKey<O, UsersMedicineRecord> key) {
        super(child, key, USERS_MEDICINE);
    }

    @Override
    public Schema getSchema() {
        return Sukeroku.SUKEROKU;
    }

    @Override
    public UniqueKey<UsersMedicineRecord> getPrimaryKey() {
        return Keys.USERS_MEDICINE_PKEY;
    }

    @Override
    public List<UniqueKey<UsersMedicineRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersMedicineRecord>>asList(Keys.USERS_MEDICINE_PKEY);
    }

    @Override
    public List<ForeignKey<UsersMedicineRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersMedicineRecord, ?>>asList(Keys.USERS_MEDICINE__USERS_MEDICINE_FK_USER_ID_FKEY, Keys.USERS_MEDICINE__USERS_MEDICINE_FK_MEDICINE_ID_FKEY);
    }

    public USERS_TABLE users() {
        return new USERS_TABLE(this, Keys.USERS_MEDICINE__USERS_MEDICINE_FK_USER_ID_FKEY);
    }

    public MEDICINE_TABLE medicine() {
        return new MEDICINE_TABLE(this, Keys.USERS_MEDICINE__USERS_MEDICINE_FK_MEDICINE_ID_FKEY);
    }

    @Override
    public USERS_MEDICINE_TABLE as(String alias) {
        return new USERS_MEDICINE_TABLE(DSL.name(alias), this);
    }

    @Override
    public USERS_MEDICINE_TABLE as(Name alias) {
        return new USERS_MEDICINE_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public USERS_MEDICINE_TABLE rename(String name) {
        return new USERS_MEDICINE_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public USERS_MEDICINE_TABLE rename(Name name) {
        return new USERS_MEDICINE_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
