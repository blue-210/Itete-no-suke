/*
 * This file is generated by jOOQ.
 */
package app.itetenosuke.infra.db.jooq.generated.tables;


import app.itetenosuke.infra.db.jooq.generated.Keys;
import app.itetenosuke.infra.db.jooq.generated.Sukeroku;
import app.itetenosuke.infra.db.jooq.generated.tables.records.NotesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 痛み記録マスタ
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NOTES_TABLE extends TableImpl<NotesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sukeroku.notes</code>
     */
    public static final NOTES_TABLE NOTES = new NOTES_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotesRecord> getRecordType() {
        return NotesRecord.class;
    }

    /**
     * The column <code>sukeroku.notes.note_id</code>. 痛み記録ID
     */
    public final TableField<NotesRecord, Long> NOTE_ID = createField(DSL.name("note_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "痛み記録ID");

    /**
     * The column <code>sukeroku.notes.pain_level</code>. 痛みレベル
     */
    public final TableField<NotesRecord, Integer> PAIN_LEVEL = createField(DSL.name("pain_level"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "痛みレベル");

    /**
     * The column <code>sukeroku.notes.memo</code>. メモ
     */
    public final TableField<NotesRecord, String> MEMO = createField(DSL.name("memo"), SQLDataType.VARCHAR(250).nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "メモ");

    /**
     * The column <code>sukeroku.notes.created_at</code>. 登録日時
     */
    public final TableField<NotesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "登録日時");

    /**
     * The column <code>sukeroku.notes.updated_at</code>. 更新日時
     */
    public final TableField<NotesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "更新日時");

    private NOTES_TABLE(Name alias, Table<NotesRecord> aliased) {
        this(alias, aliased, null);
    }

    private NOTES_TABLE(Name alias, Table<NotesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("痛み記録マスタ"), TableOptions.table());
    }

    /**
     * Create an aliased <code>sukeroku.notes</code> table reference
     */
    public NOTES_TABLE(String alias) {
        this(DSL.name(alias), NOTES);
    }

    /**
     * Create an aliased <code>sukeroku.notes</code> table reference
     */
    public NOTES_TABLE(Name alias) {
        this(alias, NOTES);
    }

    /**
     * Create a <code>sukeroku.notes</code> table reference
     */
    public NOTES_TABLE() {
        this(DSL.name("notes"), null);
    }

    public <O extends Record> NOTES_TABLE(Table<O> child, ForeignKey<O, NotesRecord> key) {
        super(child, key, NOTES);
    }

    @Override
    public Schema getSchema() {
        return Sukeroku.SUKEROKU;
    }

    @Override
    public Identity<NotesRecord, Long> getIdentity() {
        return (Identity<NotesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotesRecord> getPrimaryKey() {
        return Keys.NOTES_PKEY;
    }

    @Override
    public List<UniqueKey<NotesRecord>> getKeys() {
        return Arrays.<UniqueKey<NotesRecord>>asList(Keys.NOTES_PKEY);
    }

    @Override
    public NOTES_TABLE as(String alias) {
        return new NOTES_TABLE(DSL.name(alias), this);
    }

    @Override
    public NOTES_TABLE as(Name alias) {
        return new NOTES_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NOTES_TABLE rename(String name) {
        return new NOTES_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NOTES_TABLE rename(Name name) {
        return new NOTES_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
