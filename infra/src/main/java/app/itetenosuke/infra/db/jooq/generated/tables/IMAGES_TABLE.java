/*
 * This file is generated by jOOQ.
 */
package app.itetenosuke.infra.db.jooq.generated.tables;


import app.itetenosuke.infra.db.jooq.generated.Keys;
import app.itetenosuke.infra.db.jooq.generated.Sukeroku;
import app.itetenosuke.infra.db.jooq.generated.tables.records.ImagesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 新規テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IMAGES_TABLE extends TableImpl<ImagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sukeroku.images</code>
     */
    public static final IMAGES_TABLE IMAGES = new IMAGES_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImagesRecord> getRecordType() {
        return ImagesRecord.class;
    }

    /**
     * The column <code>sukeroku.images.images_id</code>. 部位画像ID
     */
    public final TableField<ImagesRecord, Long> IMAGES_ID = createField(DSL.name("images_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "部位画像ID");

    /**
     * The column <code>sukeroku.images.images_path</code>. 部位画像パス
     */
    public final TableField<ImagesRecord, String> IMAGES_PATH = createField(DSL.name("images_path"), SQLDataType.VARCHAR(200).nullable(false).defaultValue(DSL.field("'images/default/body_parts_default.jpeg'::character varying", SQLDataType.VARCHAR)), this, "部位画像パス");

    /**
     * The column <code>sukeroku.images.updated_at</code>. 更新日時
     */
    public final TableField<ImagesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "更新日時");

    /**
     * The column <code>sukeroku.images.created_at</code>. 登録日時
     */
    public final TableField<ImagesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "登録日時");

    private IMAGES_TABLE(Name alias, Table<ImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private IMAGES_TABLE(Name alias, Table<ImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("新規テーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>sukeroku.images</code> table reference
     */
    public IMAGES_TABLE(String alias) {
        this(DSL.name(alias), IMAGES);
    }

    /**
     * Create an aliased <code>sukeroku.images</code> table reference
     */
    public IMAGES_TABLE(Name alias) {
        this(alias, IMAGES);
    }

    /**
     * Create a <code>sukeroku.images</code> table reference
     */
    public IMAGES_TABLE() {
        this(DSL.name("images"), null);
    }

    public <O extends Record> IMAGES_TABLE(Table<O> child, ForeignKey<O, ImagesRecord> key) {
        super(child, key, IMAGES);
    }

    @Override
    public Schema getSchema() {
        return Sukeroku.SUKEROKU;
    }

    @Override
    public Identity<ImagesRecord, Long> getIdentity() {
        return (Identity<ImagesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ImagesRecord> getPrimaryKey() {
        return Keys.IMAGES_PKEY;
    }

    @Override
    public List<UniqueKey<ImagesRecord>> getKeys() {
        return Arrays.<UniqueKey<ImagesRecord>>asList(Keys.IMAGES_PKEY);
    }

    @Override
    public IMAGES_TABLE as(String alias) {
        return new IMAGES_TABLE(DSL.name(alias), this);
    }

    @Override
    public IMAGES_TABLE as(Name alias) {
        return new IMAGES_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IMAGES_TABLE rename(String name) {
        return new IMAGES_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IMAGES_TABLE rename(Name name) {
        return new IMAGES_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
