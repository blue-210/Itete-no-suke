/*
 * This file is generated by jOOQ.
 */
package app.itetenosuke.infrastructure.jooq.generated.tables;


import app.itetenosuke.infrastructure.jooq.generated.Keys;
import app.itetenosuke.infrastructure.jooq.generated.Sukeroku;
import app.itetenosuke.infrastructure.jooq.generated.tables.records.NotesImagesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 新規テーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NOTES_IMAGES_TABLE extends TableImpl<NotesImagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sukeroku.notes_images</code>
     */
    public static final NOTES_IMAGES_TABLE NOTES_IMAGES = new NOTES_IMAGES_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotesImagesRecord> getRecordType() {
        return NotesImagesRecord.class;
    }

    /**
     * The column <code>sukeroku.notes_images.fk_note_id</code>. 痛み記録ID
     */
    public final TableField<NotesImagesRecord, Long> FK_NOTE_ID = createField(DSL.name("fk_note_id"), SQLDataType.BIGINT.nullable(false), this, "痛み記録ID");

    /**
     * The column <code>sukeroku.notes_images.fk_images_id</code>. 部位画像ID
     */
    public final TableField<NotesImagesRecord, Long> FK_IMAGES_ID = createField(DSL.name("fk_images_id"), SQLDataType.BIGINT.nullable(false), this, "部位画像ID");

    /**
     * The column <code>sukeroku.notes_images.images_seq</code>. 画像連番
     */
    public final TableField<NotesImagesRecord, Integer> IMAGES_SEQ = createField(DSL.name("images_seq"), SQLDataType.INTEGER.nullable(false), this, "画像連番");

    private NOTES_IMAGES_TABLE(Name alias, Table<NotesImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private NOTES_IMAGES_TABLE(Name alias, Table<NotesImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("新規テーブル"), TableOptions.table());
    }

    /**
     * Create an aliased <code>sukeroku.notes_images</code> table reference
     */
    public NOTES_IMAGES_TABLE(String alias) {
        this(DSL.name(alias), NOTES_IMAGES);
    }

    /**
     * Create an aliased <code>sukeroku.notes_images</code> table reference
     */
    public NOTES_IMAGES_TABLE(Name alias) {
        this(alias, NOTES_IMAGES);
    }

    /**
     * Create a <code>sukeroku.notes_images</code> table reference
     */
    public NOTES_IMAGES_TABLE() {
        this(DSL.name("notes_images"), null);
    }

    public <O extends Record> NOTES_IMAGES_TABLE(Table<O> child, ForeignKey<O, NotesImagesRecord> key) {
        super(child, key, NOTES_IMAGES);
    }

    @Override
    public Schema getSchema() {
        return Sukeroku.SUKEROKU;
    }

    @Override
    public UniqueKey<NotesImagesRecord> getPrimaryKey() {
        return Keys.NOTES_IMAGES_PKEY;
    }

    @Override
    public List<UniqueKey<NotesImagesRecord>> getKeys() {
        return Arrays.<UniqueKey<NotesImagesRecord>>asList(Keys.NOTES_IMAGES_PKEY);
    }

    @Override
    public List<ForeignKey<NotesImagesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotesImagesRecord, ?>>asList(Keys.NOTES_IMAGES__NOTES_IMAGES_FK_NOTE_ID_FKEY, Keys.NOTES_IMAGES__NOTES_IMAGES_FK_IMAGES_ID_FKEY);
    }

    public NOTES_TABLE notes() {
        return new NOTES_TABLE(this, Keys.NOTES_IMAGES__NOTES_IMAGES_FK_NOTE_ID_FKEY);
    }

    public IMAGES_TABLE images() {
        return new IMAGES_TABLE(this, Keys.NOTES_IMAGES__NOTES_IMAGES_FK_IMAGES_ID_FKEY);
    }

    @Override
    public NOTES_IMAGES_TABLE as(String alias) {
        return new NOTES_IMAGES_TABLE(DSL.name(alias), this);
    }

    @Override
    public NOTES_IMAGES_TABLE as(Name alias) {
        return new NOTES_IMAGES_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NOTES_IMAGES_TABLE rename(String name) {
        return new NOTES_IMAGES_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NOTES_IMAGES_TABLE rename(Name name) {
        return new NOTES_IMAGES_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
