/*
 * This file is generated by jOOQ.
 */
package app.itetenosuke.infrastructure.jooq.generated.tables;


import app.itetenosuke.infrastructure.jooq.generated.Keys;
import app.itetenosuke.infrastructure.jooq.generated.Sukeroku;
import app.itetenosuke.infrastructure.jooq.generated.tables.records.UsersRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * ユーザーマスタ
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class USERS_TABLE extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sukeroku.users</code>
     */
    public static final USERS_TABLE USERS = new USERS_TABLE();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>sukeroku.users.user_id</code>. ユーザid
     */
    public final TableField<UsersRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "ユーザid");

    /**
     * The column <code>sukeroku.users.password</code>. パスワード
     */
    public final TableField<UsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "パスワード");

    /**
     * The column <code>sukeroku.users.user_name</code>. ユーザ名
     */
    public final TableField<UsersRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(50).nullable(false), this, "ユーザ名");

    /**
     * The column <code>sukeroku.users.email</code>. Eメール
     */
    public final TableField<UsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(254).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "Eメール");

    /**
     * The column <code>sukeroku.users.birthday</code>. birthday
     */
    public final TableField<UsersRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.LOCALDATE, this, "birthday");

    /**
     * The column <code>sukeroku.users.age</code>. age
     */
    public final TableField<UsersRecord, Short> AGE = createField(DSL.name("age"), SQLDataType.SMALLINT, this, "age");

    /**
     * The column <code>sukeroku.users.role</code>. ロール
     */
    public final TableField<UsersRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(50).nullable(false), this, "ロール");

    /**
     * The column <code>sukeroku.users.status</code>. ユーザーステータス : 使用中ならALIVE, 削除済みならDELETED
     */
    public final TableField<UsersRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.field("'ALIVE'::character varying", SQLDataType.VARCHAR)), this, "ユーザーステータス : 使用中ならALIVE, 削除済みならDELETED");

    /**
     * The column <code>sukeroku.users.created_at</code>. 登録日時
     */
    public final TableField<UsersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "登録日時");

    /**
     * The column <code>sukeroku.users.updated_at</code>. 更新日時
     */
    public final TableField<UsersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "更新日時");

    private USERS_TABLE(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private USERS_TABLE(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ユーザーマスタ"), TableOptions.table());
    }

    /**
     * Create an aliased <code>sukeroku.users</code> table reference
     */
    public USERS_TABLE(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>sukeroku.users</code> table reference
     */
    public USERS_TABLE(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>sukeroku.users</code> table reference
     */
    public USERS_TABLE() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> USERS_TABLE(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return Sukeroku.SUKEROKU;
    }

    @Override
    public Identity<UsersRecord, Long> getIdentity() {
        return (Identity<UsersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRecord>>asList(Keys.USERS_PKEY, Keys.USERS_EMAIL_KEY);
    }

    @Override
    public USERS_TABLE as(String alias) {
        return new USERS_TABLE(DSL.name(alias), this);
    }

    @Override
    public USERS_TABLE as(Name alias) {
        return new USERS_TABLE(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public USERS_TABLE rename(String name) {
        return new USERS_TABLE(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public USERS_TABLE rename(Name name) {
        return new USERS_TABLE(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, String, LocalDate, Short, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
